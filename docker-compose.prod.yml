version: "3.8"

services:
  # API Gateway
  gateway:
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    image: yourusername/monitoring-gateway:latest
    restart: always
    depends_on:
      - auth-service
      - monitoring-service
      - notification-service
      - status-page-service
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - MONITORING_SERVICE_URL=http://monitoring-service:3002
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
      - STATUS_PAGE_SERVICE_URL=http://status-page-service:3004
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Auth Service
  auth-service:
    build: 
      context: ./services/auth-service
      dockerfile: Dockerfile
    image: yourusername/monitoring-auth-service:latest
    restart: always
    depends_on:
      - mongo
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=3001
      - MONGO_URI=mongodb://mongo:27017/auth-service
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=1d
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Monitoring Service
  monitoring-service:
    build: 
      context: ./services/monitoring-service
      dockerfile: Dockerfile
    image: yourusername/monitoring-service:latest
    restart: always
    depends_on:
      - mongo
      - redis
      - auth-service
    environment:
      - NODE_ENV=production
      - MONITORING_SERVICE_PORT=3002
      - MONGO_URI=mongodb://mongo:27017/monitoring-service
      - REDIS_URI=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:3001
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Notification Service
  notification-service:
    build: 
      context: ./services/notification-service
      dockerfile: Dockerfile
    image: yourusername/monitoring-notification-service:latest
    restart: always
    depends_on:
      - mongo
      - redis
      - auth-service
    environment:
      - NODE_ENV=production
      - NOTIFICATION_SERVICE_PORT=3003
      - MONGO_URI=mongodb://mongo:27017/notification-service
      - REDIS_URI=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:3001
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Status Page Service
  status-page-service:
    build: 
      context: ./services/status-page-service
      dockerfile: Dockerfile
    image: yourusername/monitoring-status-page-service:latest
    restart: always
    depends_on:
      - mongo
      - redis
      - auth-service
      - monitoring-service
    environment:
      - NODE_ENV=production
      - STATUS_PAGE_SERVICE_PORT=3004
      - MONGO_URI=mongodb://mongo:27017/status-page-service
      - REDIS_URI=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:3001
      - MONITORING_SERVICE_INTERNAL_URL=http://monitoring-service:3002
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
    image: yourusername/monitoring-frontend:latest
    restart: always
    depends_on:
      - gateway
    networks:
      - app-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  # MongoDB - Using replica set for production
  mongo:
    image: mongo:5.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    volumes:
      - mongo-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  # MongoDB Setup - Initialize replica set
  mongo-setup:
    image: mongo:5.0
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./scripts/mongo-setup.sh:/mongo-setup.sh
    entrypoint: ["/bin/bash", "/mongo-setup.sh"]
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Redis - For caching and message queuing
  redis:
    image: redis:6-alpine
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    networks:
      - app-network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  # Nginx - Load balancer and reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/www:/var/www/html
    depends_on:
      - gateway
      - frontend
    networks:
      - app-network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local

networks:
  app-network:
    driver: overlay
    attachable: true